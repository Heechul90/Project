df_score<-data.frame('중간'=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score
df_scroe2<-cbind(df_score, (90+50/2), (78+60/2), (94+90/2), (70+92/2))
df_score2<-cbind(df_score, (90+50/2), (78+60/2), (94+90/2), (70+92/2))
df_score2
average<-(90+50/2), (78+60/2), (94+90/2), (70+92/2)
average<-((90+50/2), (78+60/2), (94+90/2), (70+92/2))
average1<-c((90+50/2), (78+60/2), (94+90/2),(70+92/2))
df_score2<-cbind(df_score, average1)
df_score2
평균<-c((90+50/2), (78+60/2), (94+90/2),(70+92/2))
df_score2<-cbind(df_score, average1)
df_score2
평균<-c((90+50/2), (78+60/2), (94+90/2),(70+92/2))
df_score2<-cbind(df_score, average1)
df_score2
평균<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, average1)
df_score2
평균<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, 평균)
df_score2
평균<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, c)
df_score2<-cbind(df_score, 평균)
평균<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2)))
df_score2<-cbind(df_score, c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))))
average<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, average)
df_score2<-cbind(df_score, average)
df_score<-data.frame('중간'=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score
average<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, average)
df_score2
df_score<-data.frame(c('강경학','김태균','이성열','정은원','중간'=c(90,78,94,70),'기말'=c(50,60,90,92)))
df_score
df_score<-data.frame(=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score<-data.frame(='중간'=c(90,78,94,70),'기말'=c(50,60,90,92)))
df_score<-data.frame(='중간'=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score<-data.frame('중간'=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score
average<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, average)
df_score2
3.score<-(c('C','D','A','B'))
3.score<-c('C','D','A','B')
3.score<-c(C,D,A,B)
score<-c(C,D,A,B)
score<-c('C','D','A','B')
df_score3<-cbind(df_score2,score)
df_score3
학점<-c('C','D','A','B')
df_score3<-cbind(df_score2,'학점')
df_score3
oddsum<-for (1 in 1+1) {
score<-c('C','D','A','B')
df_score3<-cbind(df_score2,score)
df_score3
oddsum<-for (i in 1:100) { result = i/2 }
oddsum
result(oddsum)
oddsum<-for (i in 1:100) { result = i/2 }
sum=( i+1 ) }
( i+1 ) }
i+1  }
names<-c('강경학','김태균','이성열',정은원')
names<-c('강경학','김태균','이성열',정은원')
names<-c("강경학","김태균","이성열","정은원")
names
names<-data.frame(c("강경학","김태균","이성열","정은원"))
names
names<-rbind(df_score)
names<-rbind(df_score)
names<-rbind(df_score3)
names
names
names2<-rbind(names, df_score3)
names2
names<-c("강경학","김태균","이성열","정은원")
names<-rbind.data.frame(df_score2)
names
names<-c("강경학","김태균","이성열","정은원")
names<-rbind.data.frame(names, df_score2)
names2<-rbind.data.frame(names, df_score2)
names2
names<-c("강경학","김태균","이성열","정은원")
names2<-cbind.data.frame(names, df_score2)
names2
이름<-c("강경학","김태균","이성열","정은원")
names2<-cbind.data.frame(이름, df_score2)
names2
평균<-c(((90+50)/2), ((78+60)/2), ((94+90)/2),((70+92)/2))
df_score2<-cbind(df_score, 평균)
df_score2
df_score<-data.frame('중간'=c(90,78,94,70),'기말'=c(50,60,90,92))
df_score
이름<-c("강경학","김태균","이성열","정은원")
names2<-cbind.data.frame(이름, df_score2)
names2
이름<-c("강경학","김태균","이성열","정은원")
이름<-c("강경학","김태균","이성열","정은원")
names3<-cbind.data.frame(이름, df_score3)
score<-c('C','D','A','B')
df_score3<-cbind(df_score2,score)
df_score3
이름<-c("강경학","김태균","이성열","정은원")
names3<-cbind.data.frame(이름, df_score3)
names3
학점<-c('C','D','A','B')
df_score3<-cbind(df_score2,score)
df_score3
이름<-c("강경학","김태균","이성열","정은원")
names3<-cbind.data.frame(이름, df_score3)
names3
df_score3<-cbind(df_score2,학점)
df_score3
이름<-c("강경학","김태균","이성열","정은원")
names3<-cbind.data.frame(이름, df_score3)
names3
}
if(x%%2=1)
if(x%%2= "y")
if(x%%2= y)
oddsum<-for(i in num){
if(i %% 2 == 0)
}
oddsum<-for(i in 1:100){
if(i %% 2 == 0)
}
data(iris)
data
iris
head(iris)
summary(Sepal.Width)
summary(iris$Sepal.Width)
boxplot(iris$Sepal.Width,col="red")
summary(iris$Sepal.Width)
data(mpg)
head(mpg)
mpg
data(mpg)
mpg
iris
c("mpg")
mpg
mpg
library(mpg)
data=mpg
ggplot(data=mpg)
library(dplyr)
mpg
head(mpg)
library(ggplot2)
head(mpg)
data(mpg)
mpg
library(dplyr)
library(ggplot2)
head(mpg)
summary(mpg$cty&mpg$hwy)
summary(mpg$manufacturer='toyota')
summary(mpg$manufacturer)
filter(manufactuer='toyota')
filter(mpg, manufactuer='toyota')
filter(mpg, manufactuer="toyota")
filter(mpg, manufactuer=="toyota")
filter(mpg, manufacturer=="toyota")
mpg1<-filter(mpg, manufacturer=="toyota")
mpg2<- mpg1 >%> select(cty, hwy)
select(mpg1, contains("cty","hwy"))
mpg1<-filter(mpg, manufacturer=="toyota")
mpg1
select(mpg1, cty:hwy)
select(mpg1, model, cty, hwy)
mpg2<-select(mpg1, model, cty, hwy)
mpg2
barplot(mpg2, x=model)
barplot(mpg2)
mpg2
baxplot(mpg2)
baxplot(mpg2$cty,mpg$hwy)
baxplot(mpg2$cty&mpg$hwy)
baxplot(mpg2$cty)
summary(mpg2$cty & mpg2$hwy)
boxplot(mpg2$cty & mpg2$hwy)
summary(mpg2$cty & mpg2$hwy)
barplot(mpg2$cty & mpg2$hwy)
boxplot(mpg2$cty & mpg2$hwy)
mpg
filter(mpg, mpg$cty)
head(mpg, 7)
mpg3<-filter(mpg, max(cty))
filter(mpg, class=suv)
mpg
filter(mpg,  mpg$class=suv)
filter(mpg$class=suv)
summary(mpg$class=suv)
summary(mpg$class = 'suv')
mpg3<-filter(mpg, class='SUV')
mpg3<-filter(mpg, class="SUV")
mpg3<-filter(mpg, class = "SUV")
mpg3<-filter(mpg, class == "SUV")
mpg3
mpg
mpg3<-filter(mpg, class == "suv")
mpg3
group_by(manufacturer)
mpg3 >%>
mpg3 >%>
mpg >%>
mpg >%>
mpg >%>
mpg3
group_by(manufacturer)
group_by(manufacturer)
mpg3
group_by(manufacturer)
mpg3
summarise(manufacturer)
mpg3<-group_by(mnufacturer)
mpg3<-group_by(manufacturer)
mpg
vec3<-c(1:3)
vec3
vector<-c(1:3)
install.packages("foreign")
library(foreign)
if("ggplot2" %in% installed.packages("ggplot2") == FALSE)install.packages("ggplot2")
library(ggplot2)
if("dplyr" %in% installed.packages("dplyr") == FALSE)install.packages("dplyr")
library(dplyr)
install.packages("readxl")
library(readxl)
install.packages("dplyr")
raw_walfare <- read.spss(file = "https://www.dropbox.com/s/b33ob8v0nmig4bw/Koweps_hpc10_2015_beta1.sav?dl=1", to.data.frame = T)
getwd()
raw_walfare <- read.spss(file="Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
View(head(raw_walfare))
head(raw_walfare)
str(raw_walfare)
summary(raw_walfare)
welfare <- raw_walfare
welfare<-rename(welfare, sex=h10_g3,
birth=h10_g4,
marriage=h10_g10,
religion=h10_g11,
income=p1002_Baq1,
code_job=h10_eco9,
code_region=h10_reg7)
names(welfare)
welfare <- dplyr::rename(
welfare,
sex = h10_g3, # 성별
birth = h10_g4, # 채어난 연도
marriage = h10_g10, # 혼인 상태
religion = h10_g11, # 종교
income = p1002_8aq1, # 월급
code_job = h10_eco9, # 직업 코드
code_region = h10_reg7 # 지역 코드
)
welfare <- subset(welfare,
select = c(sex, birth, marriage, religion, income, code_job, code_region))
head(welfare)
class(welfare$sex)
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
table(is.na(welfare$sex))
# 성별 항목 이름 부여
welfare$sex <- ifelse(welfare$sex == 1, "남성","여성")
table(welfare$sex)
qplot(welfare$sex)
### 월급 변수 검토 및 전처리
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)+ xlim(0,1000)
## 월급 이상치 결측처리
welfare$income <- ifelse(
welfare$income %in% c(0,9999),NA,welfare$income)
table(is.na(welfare$sex))
qplot(welfare$income)
# graph 그리기
ggplot(
data = sex_income,
aes(x=sex, y=mean_income)
) + geom_col()
## 성별에 다른 월급 차이 분석하기
sex_income <- welfare %>%
dplyr::filter(!is.na(income)) %>%
dplyr::group_by(sex) %>%
dplyr::summarise(mean_income = mean(income))
sex_income
# graph 그리기
ggplot(
data = sex_income,
aes(x=sex, y=mean_income)
) + geom_col()
## 나이와 월급의 관계
# 1) 결측치 제거
welfare$birth <- ifelse(welfare$birth==999, NA,welfare$birth)
table(is.na(welfare$birth))
# 2) 나이 만들기
welfare$age <- 2015-welfare$birth + 1
qplot(welfare$age)
age_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
age_income
ggplot(
data =  age_income,
aes(
x= age,
y= mean_income
)
) +geom_line()
## 3) 파생변수 만들기 : mutate()
welfare <- welfare %>%
dplyr::mutate(ageg = ifelse(age<30,"초년",ifelse(age <= 59, "중년", "노년")))
table(welfare$ageg)
qplot(welfare$ageg)
sex_income <- welfare %>%
dplyr::filter(!is.na(income)) %>%
group_by(ageg,sex) %>%
summarise(mean_income = mean(income))
x = ageg,
y = mean_income,
fill = sex)) +
geom_col()+
scale_x_discrete(limits = c("초년", "중년","노년"))
## 5) p230 그래프 옆으로 합치기
ggplot(data= sex_income,aes(x=ageg, y=mean_income, fill = sex))+
geom_col(position="dodge") +
scale_x_discrete(limits=c("초년", "중년","노년"))
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
head(sex_age)
ggplot(data=sex_age, aes(x=age, y= mean_income, col= sex))+geom_line()
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
x = ageg,
y = mean_income,
fill = sex)) +
geom_col()+
scale_x_discrete(limits = c("초년", "중년","노년"))
sex_income <- welfare %>%
dplyr::filter(!is.na(income)) %>%
group_by(ageg,sex) %>%
summarise(mean_income = mean(income))
ggplot(
data= sex_income,
aes(
x = ageg,
y = mean_income,
fill = sex)) +
geom_col()+
scale_x_discrete(limits = c("초년", "중년","노년"))
welfare <- welfare %>%
dplyr::mutate(ageg = ifelse(age<30,"초년",ifelse(age <= 59, "중년", "노년")))
table(welfare$ageg)
qplot(welfare$ageg)
sex_income <- welfare %>%
dplyr::filter(!is.na(income)) %>%
group_by(ageg,sex) %>%
summarise(mean_income = mean(income))
sex_income <- welfare %>%
dplyr::filter(!is.na(income)) %>%
dplyr::group_by(sex) %>%
dplyr::summarise(mean_income = mean(income))
sex_income
ggplot(
data = sex_income,
aes(x=sex, y=mean_income)
) + geom_col()
welfare$birth <- ifelse(welfare$birth==999, NA,welfare$birth)
table(is.na(welfare$birth))
head(sex_age)
ggplot(data=sex_age, aes(x=age, y= mean_income, col= sex))+geom_line()
palete <- brewer.pal(11, 'Spectral')
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 0.25,
min.freq = 10, random.order = F, random.color = T, colors = palete)
## 필요패키지
library(KoNLP)
library(wordcloud)
library(stringr)
library(dplyr)
useSejongDic()
# 폰트 세팅. 띄어쓰기나 대소문자에 민감하다는 점에 주의
windowsFonts(malgun=windowsFont("맑은 고딕"))      # 맑은고딕
windowsFonts(malgun=windowsFont("나눔고딕"))       # 나눔고딕
Arial : windowsFonts(malgun=windowsFont("Arial"))  # 영어폰트
windowsFonts(malgun=windowsFont("맑은 고딕"))
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 0.25,
min.freq = 10, random.order = F, random.color = T, colors = palete)
palete <- brewer.pal(11, 'Spectral')
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 0.25,
min.freq = 10, random.order = F, random.color = T, colors = palete)
### 1. Word Cloud
## 파일 불러오기
rawdata <- read.csv('data/review(naver).csv', header = T)
data <- rawdata %>%
select(reple)
write.csv(data,'data/reple.csv',
row.names=F)
data <- readLines('data/reple.csv')
okja <- sapply(data, extractNoun, USE.NAMES = F)
okja <- unlist(okja)
head(okja)
# 1. 한글, 영어 외는 삭제
okja <- str_replace_all(okja,'[^[:alpha:]]','')     # 한글, 영어 외는 삭제
# 2. gsub() 함수로 바꾸기
okja <- gsub(' ','', okja)
okja <- gsub('\\.','', okja)
okja <- gsub(' ','', okja)
okja <- gsub("\\'",'', okja)
okja <- gsub('의미','주제', okja)
okja <- gsub('감성','감정', okja)
okja <- gsub('내용','주제', okja)
okja <- gsub('채식주의자','채식', okja)
okja <- gsub('채식주의','채식', okja)
# 필터링으로 지우기
okja <- Filter(function(x){nchar(x) >=2 & nchar(x) <=5 }, okja)
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('data/okjagsub.txt')
i <- 1
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('data/okjagsub.txt')
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('data/okjagsub.txt')
setwd('D:/Heechul/project/project01')
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('data/okjagsub.txt')
i <- 1
for(i in 1 : length(txt)) {
okja <- gsub((txt[i]), '', okja)
}
# 3. 저장후 테이블로 불러서 공백 지우기
write(unlist(okja), 'data/reple.txt')
rev <- read.table('data/reple.txt')
nrow(rev)
### 1. Word Cloud
## 파일 불러오기
rawdata <- read.csv('data/review(naver).csv', header = T)
data <- rawdata %>%
select(reple)
str(data)
head(data)
write.csv(data,'data/reple.csv',
row.names=F)
data <- readLines('data/reple.csv')
okja <- sapply(data, extractNoun, USE.NAMES = F)
okja <- unlist(okja)
head(okja)
# 1. 한글, 영어 외는 삭제
okja <- str_replace_all(okja,'[^[:alpha:]]','')     # 한글, 영어 외는 삭제
okja
# 2. gsub() 함수로 바꾸기
okja <- gsub(' ','', okja)
okja <- gsub('\\.','', okja)
okja <- gsub(' ','', okja)
okja <- gsub("\\'",'', okja)
okja <- gsub('의미','주제', okja)
okja <- gsub('감성','감정', okja)
okja <- gsub('내용','주제', okja)
okja <- gsub('채식주의자','채식', okja)
okja <- gsub('채식주의','채식', okja)
okja
# 필터링으로 지우기
okja <- Filter(function(x){nchar(x) >=2 & nchar(x) <=5 }, okja)
okja
# 지울 단어 불러와서 반복문으로 지우기
txt <- readLines('data/okjagsub.txt')
i <- 1
for(i in 1 : length(txt)) {
okja <- gsub((txt[i]), '', okja)
}
okja
# 필터링으로 지우기
okja <- Filter(function(x){nchar(x) >=2 & nchar(x) <=5 }, okja)
okja
# 3. 저장후 테이블로 불러서 공백 지우기
write(unlist(okja), 'data/reple.txt')
rev <- read.table('data/reple.txt')
nrow(rev)
rev
wordcount <- table(rev)
head(sort(wordcount, decreasing = T), 100)
palete <- brewer.pal(11, 'Spectral')
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 0.25,
min.freq = 10, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 0.5,
min.freq = 10, random.order = F, random.color = T, colors = palete)
wordcloud(names(wordcount), freq=wordcount, scale=c(0.5,0.1), rot.per = 1,
min.freq = 10, random.order = F, random.color = T, colors = palete)
library(extrafont)
install.packages('extrafont')
library(extrafont)
# 폰트 세팅. 띄어쓰기나 대소문자에 민감하다는 점에 주의
windowsFonts(malgun=windowsFont("맑은 고딕"))      # 맑은고딕
windowsFonts(malgun=windowsFont("나눔고딕"))       # 나눔고딕
Arial : windowsFonts(malgun=windowsFont("Arial"))  # 영어폰트
windowsFonts(malgun=windowsFont("맑은 고딕"))
font_import()
