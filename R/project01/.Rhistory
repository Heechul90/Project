# read.csv.sql
install.packages('googleVis')
# read.csv.sql
install.packages('googleVis')
install.packages('googleVis')
install.rtools(f,f)
install.packages('googleVis')
install.packages('googleVis')
library()
install.packages('googleVis')
install.packages(c('googleVis')
install.packages(c('googleVis')
install.rtools(f,f)
install.packages(c('googleVis')
install.packages('googleVis')
install.packages('googleVis')
install.packages('googleVis')
# 연습문제
#1. 구구단
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
# 연습문제
#1. 구구단
library(stringr)
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- print(paste(i, '*', K, '=', i*l))
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*l)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', k, '=', i*K)
print(x)
}
}
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*K)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for(i in 2:9) {
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
gg <- function(x) {
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
}
gg(1)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
d <- paste(!)
while(w<4) {
d <- paste(!)
print(d)
}
while(w<4) {
d <- w
print(d)
}
print(w)
while(w<4) {
print(w)
}
w <- 0
while(w<4) {
print(w)
}
install.packages("rvest")
install.packages("stringr")
library(rvest)
library(stringr)
main_url = "https://kin.naver.com/search/list.nhn?sort=none&query=대학생&period=1m&section=kin&page="
kin_list = character()
title_list = character()
date_list = character()
for(page_url in 1:10){
number = 1
url = paste(main_url,page_url,sep="")
content = read_html(url)
link_node = html_nodes(content,"._nclicks\\:kin\\.txt")
link_urls = html_attr(link_node, "href")
title = html_text(link_node)
title_list = append(title_list, title)
date_node = html_nodes(content,".txt_inline")
date = html_text(date_node)
date = as.Date(gsub("\\.","-",date))
date_list = append(date_list, date)
for(link in link_urls){
sub_content = read_html(link)
node1 = html_nodes(sub_content, "#contents_layer_0 ._endContentsText")
kin = html_text(node1)
kin = gsub("\n|\t","",kin)
kin_list = append(kin_list, kin)
print(sprintf("Number of article is %d", number))
number = number + 1
}
}
## 인피니티워 네이버 평점 페이지 주소 ##
main_url = "https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=136315&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page="
for(page_url in 1:10) {
url = paste(main_url, page_url, sep='')
}
url
for(page_url in 1:10) {
url = paste(main_url, page_url, sep='')
content = read_html(url)
}
content
## 인피니티워 네이버 평점 페이지 주소 ##
main_url = 'https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=136315&type=after&onlyActualPointYn=N&order=newest&page='
for(page_url in 1:10) {
url <- paste(main_url, page_url, sep='')
content <- read_html(url)
}
content
for(page_url in 1:10) {
url <- paste(main_url, page_url, sep='')
content <- read_html(url)
node_1 <- html_nodes(content, '.score_reple p')
}
node_1
rawokja <- read.csv('data/okja.csv', header = T)
head(rawokja)
okja <- rawokja %>%
select(score, date, time, month, day, fee)
head(okja)
## 필요패키지
library(KoNLP)
library(wordcloud)
library(stringr)
library(dplyr)
library(RColorBrewer)
library(extrafont)
library(wordcloud2)
useSejongDic()
library(ggplot2)
library(xlsx)
library(write)
# 폰트 세팅. 띄어쓰기나 대소문자에 민감하다는 점에 주의
windowsFonts(malgun=windowsFont("맑은 고딕"))      # 맑은고딕
windowsFonts(malgun=windowsFont("나눔고딕"))       # 나눔고딕
windowsFonts(malgun=windowsFont("Arial"))          # 영어폰트
windowsFonts(malgun=windowsFont("배달의민족 연성"))
rawokja <- read.csv('data/okja.csv', header = T)
setwd('D:/Heechul/Project/R/project01')
rawokja <- read.csv('data/okja.csv', header = T)
head(rawokja)
okja <- rawokja %>%
select(score, date, time, month, day, fee)
head(okja)
# 01. 월별에 따른 평점
month_score <- okja %>%
select(score, month) %>%
group_by(month) %>%
summarise(month_score_mean = mean(score)) %>%
arrange(month_score_mean)
month_score
ggplot(month_score, aes(x= reorder(month, -month_score_mean), y=month_score_mean, fill = month)) +
geom_bar(stat = 'identity', color = 'black') +
ggtitle('월별에 따른 평균평점') +
xlab('월') +
ylab('평균평점') +
theme_classic() +
theme_bw(base_family = '맑은 고딕') +
theme(plot.title = element_text(size=20, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=90, size = 10, color='black')) +
theme(axis.text.y = element_text(angle=0, size = 10, color='black')) +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
geom_text(aes(y=month_score_mean - 0.2, label= paste(round(month_score_mean,1), '점')),
color='black', size=5)
# 02. 요일에 따른 평점
day_score <- okja %>%
select(day, score) %>%
group_by(day) %>%
summarise(day_score_mean = mean(score))
day_score
ggplot(day_score, aes(reorder(day, -day_score_mean), y= day_score_mean, fill= day)) +
geom_bar(stat = 'identity') +
ggtitle('요일에 따른 평균평점') +
xlab('요일') +
ylab('평균평점') +
theme_classic() +
theme_bw(base_family = '맑은 고딕') +
theme(plot.title = element_text(size=20, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=90, size = 10, color='black')) +
theme(axis.text.y = element_text(angle=0, size = 10, color='black')) +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
geom_text(aes(y=day_score_mean - 0.2, label= paste(round(day_score_mean,1), '점')),
color='black', size=5)
# 03. 주말 시간에 따른 평점
weekend_score <- okja %>%
filter(day %in% c('Friday', 'Saturday', 'Sunday')) %>%
select(time, score) %>%
group_by(time) %>%
summarise(weekend_score_mean = mean(score))
weekend_score
ggplot(weekend_score, aes(x= time, y= weekend_score_mean, fill= time)) +
geom_bar(stat = 'identity') +
ggtitle('요일에 따른 평균평점') +
xlab('요일') +
ylab('평균평점') +
theme_classic() +
theme_bw(base_family = '맑은 고딕') +
theme(plot.title = element_text(size=20, color = 'red',
hjust = 0.5, vjust=0)) +
theme(axis.title.x = element_text(size = 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.title.y = element_text(size= 15, color = 'red',
hjust = 0.5, vjust = 0)) +
theme(axis.text.x = element_text(angle=0, size = 15, color='black')) +
theme(axis.text.y = element_text(angle=0, size = 10, color='black')) +
theme(legend.title = element_text(size=10)) +
scale_fill_discrete(labels = c('나이트(24:00~)', '모닝(06:00~)', '브런치(10:00~)','데이라이트(13:00~)', '프라임(16:00~)', '문라이트(22:00~)')) +
geom_text(aes(y=weekend_score_mean - 0.3, label= paste(round(weekend_score_mean,1), '점')),
color='black', size=5)
