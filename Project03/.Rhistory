# read.csv.sql
install.packages('googleVis')
# read.csv.sql
install.packages('googleVis')
install.packages('googleVis')
install.rtools(f,f)
install.packages('googleVis')
install.packages('googleVis')
library()
install.packages('googleVis')
install.packages(c('googleVis')
install.packages(c('googleVis')
install.rtools(f,f)
install.packages(c('googleVis')
install.packages('googleVis')
install.packages('googleVis')
install.packages('googleVis')
# 연습문제
#1. 구구단
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
# 연습문제
#1. 구구단
library(stringr)
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- print(paste(i, '*', K, '=', i*l))
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*l)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', K, '=', i*k)
print(x)
}
}
for (i in 2:9) {
x <- paste(i, '단')
print(x)
for(k in 1:9) {
x <- paste(i, '*', k, '=', i*K)
print(x)
}
}
for (i in 2:9) {
line <- str_c(i, '단')
print(line)
for (k in 1:9) {
line <- str_c(i, ' * ', k, ' = ', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*K)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for (i in 2:9) {
line <- paste(i, '단')
print(line)
for(k in 1:9) {
line <- paste(i, '*', k, '=', i*k)
print(line)
}
}
for(i in 2:9) {
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(i)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
}
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
gg <- function(x) {
for(i in 2:9) {
gugudan <- paste(i, '단')
print(gugudan)
for(k in 1:9) {
ggg <- paste(i, '*', k, '=', i*k)
print(ggg)
}
}
}
gg(1)
while (T) {
for (i in 1:4) {
line <- ''
if (i != 4) {
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
}
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
for (i in 3:1) {
line <- ''
for (k in 1:(3 - (i - 1)))
line <- str_c(line, ' ')
for (k in 1:(2*i - 1))
line <- str_c(line, '#')
print(line)
}
break;
}
d <- paste(!)
while(w<4) {
d <- paste(!)
print(d)
}
while(w<4) {
d <- w
print(d)
}
print(w)
while(w<4) {
print(w)
}
w <- 0
while(w<4) {
print(w)
}
install.packages("rvest")
install.packages("stringr")
library(rvest)
library(stringr)
main_url = "https://kin.naver.com/search/list.nhn?sort=none&query=대학생&period=1m&section=kin&page="
kin_list = character()
title_list = character()
date_list = character()
for(page_url in 1:10){
number = 1
url = paste(main_url,page_url,sep="")
content = read_html(url)
link_node = html_nodes(content,"._nclicks\\:kin\\.txt")
link_urls = html_attr(link_node, "href")
title = html_text(link_node)
title_list = append(title_list, title)
date_node = html_nodes(content,".txt_inline")
date = html_text(date_node)
date = as.Date(gsub("\\.","-",date))
date_list = append(date_list, date)
for(link in link_urls){
sub_content = read_html(link)
node1 = html_nodes(sub_content, "#contents_layer_0 ._endContentsText")
kin = html_text(node1)
kin = gsub("\n|\t","",kin)
kin_list = append(kin_list, kin)
print(sprintf("Number of article is %d", number))
number = number + 1
}
}
## 인피니티워 네이버 평점 페이지 주소 ##
main_url = "https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=136315&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page="
for(page_url in 1:10) {
url = paste(main_url, page_url, sep='')
}
url
for(page_url in 1:10) {
url = paste(main_url, page_url, sep='')
content = read_html(url)
}
content
## 인피니티워 네이버 평점 페이지 주소 ##
main_url = 'https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=136315&type=after&onlyActualPointYn=N&order=newest&page='
for(page_url in 1:10) {
url <- paste(main_url, page_url, sep='')
content <- read_html(url)
}
content
for(page_url in 1:10) {
url <- paste(main_url, page_url, sep='')
content <- read_html(url)
node_1 <- html_nodes(content, '.score_reple p')
}
node_1
setwd('D:/Heechul/R_Project/Project03')
getwd()
rawdata <- read.csv('Data/sales.csv')
head(rawdata)
Data_raw <- read.csv('Data/sales.csv')
head(Data_raw)
length(Data_raw)
tail(Data_raw)
# 패키지 준비
library(dplyr)
library(str)
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
length(data_raw)
tail(data_raw)
data <- data_raw %>%
filter(CATEGORY == '스포츠,이온음료')
data
data <- data[-CATEGORY]
data <- data[-CATEGORY]
data <- data(-CATEGORY)
data <- data[,-2]
data <- data[,c(-2)]
data <- subset(data, select = -CATEGORY)
data[YM]
data['YM']
data
data
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
length(data_raw)
tail(data_raw)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '스포츠,이온음료')
data
data <- data[,-c(2)]
data
head(data)
str(data)
data$chas <- as.factor(data$chas)
# 산점도 그려보기
pairs(data)
library(ggplot2)
# 산점도 그려보기
pairs(data)
# 산점도 그려보기
pairs(data)
# 산점도 그려보기
pairs(data)
# Linear Regression Model
fit1 <- lm(QTY~. data = data)
data
# Linear Regression Model
fit1 <- lm(QTY~., data = data)
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# Stepwise regression
# 1. backward elimination
step(fit1, direction = 'backward')
# 2. forward selection
fit2 <- lm(QTY~., data = data)
step(fit2,
direction = "forward",
scope = ~QTY + YM + ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 2. forward selection
fit2 <- lm(QTY~., data = data)
step(fit2,
direction = "forward",
scope = ~YM + ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 2. forward selection
fit2 <- lm(QTY~., data = data)
step(fit2,
direction = "forward",
scope = ~YM + ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 3. stepwise regression
step(fit1, direction = 'both')
# 2. forward selection
fit2 <- lm(QTY~1, data = data)
step(fit2,
direction = "forward",
scope = ~YM + ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
fit3 <- lm(QTY ~ MAXTEMP + YM + PRICE + HOLIDAY, data = data)
(fit3 <- lm(QTY ~ MAXTEMP + YM + PRICE + HOLIDAY, data = data))
summary(fit3)
# 4. All possible regression
library(leaps)
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 7)
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 7)
plot(subsets2)
# 1. 정규성 (normality)
par(mfrow = c(2, 2))
plot(fit3)
# 1. 정규성 (normality)
qqnorm(fit2$residuals) ; qqline(fit2$residuals)
# 1. 정규성 (normality)
qqnorm(fit2$residuals) ; qqline(fit2$residuals)
par(mfrow = c(1, 1))
# 1. 정규성 (normality)
qqnorm(fit2$residuals) ; qqline(fit2$residuals)
shapiro.test(fit2$residuals)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
install.packages('gvlma')
gvmodel2 <- gvlma(fit2)
summary(gvmodel2)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
gvmodel2 <- gvlma(fit2)
gvmodel2 <- gvlma(fit2)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
gvmodel2 <- gvlma(fit2)
gvmodel <- gvlma(fit2)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
gvmodel <- gvlma(fit2)
summary(gvmodel)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
gvmodel
gvlma
gvlma(fit2)
fit2
(fit3 <- lm(QTY ~ MAXTEMP + YM + PRICE + HOLIDAY, data = data))
# Checking Assumptions
par(mfrow = c(2, 2))
plot(fit3)
par(mfrow = c(1, 1))
# 1. 정규성 (normality)
qqnorm(fit3$residuals) ; qqline(fit3$residuals)
shapiro.test(fit3$residuals)
# 2. 등분산성 (homoscedasticity)
library(gvlma)
gvmodel <- gvlma(fit3)
summary(gvmodel)
# 3. 선형성 (linearity)
library(car)
durbinWatsonTest(fit3)
# 결과적으로 fit3모델은 다중선형회귀분석에 대한 기본가정을 만족하지 못함함
AIC(fit3)
head(data)
