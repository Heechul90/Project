print(sqrt(444.7572))
1846.7572 / 1402
1402 / 1846.7572
1402 - 1846.7572
(1402 - 444.7572) / 1402
(1402 - 444.7572) / 1402 * 100
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
setwd('D:/Heechul/R_Project/Project03')
getwd()
# 패키지 준비
library(dplyr)
library(stringr)
library(ggplot2)
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
length(data_raw)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
head(data)
str(data)
# fit4의 다중회귀식을 만들어서 QTY 예측
data['pre_QTY'] = round((-1188.2848) + (data['ITEM_CNT'] * (23.0316)) + (data['PRICE'] * (0.7479)) + (data['MAXTEMP'] * (13.6824)), 0)
data
# 데이터 처리
data1['Diff'] <- data1['QTY'] - data1['pre_QTY']
data
# 데이터 처리
data['Diff'] <- data['QTY'] - data['pre_QTY']
data
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY'] * 100
data
data['ACC'] <- (data['QTY'] - abs(data['Diff'])) / data['QTY'] * 100
data
head(data)
summary(fit4)
## HOLIDAY, SALEDAY, RAINDAY 변수를 뺀 모델을 fit4로 지정
(fit4 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP, data = data))
summary(fit4)
head(data)
# 데이터 처리
data['Diff'] <- data['pre_QTY'] - data['QTY']
head(data)
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY'] * 100
head(data)
data['ACC'] <- (data['QTY'] - abs(data['Diff'])) / data['QTY'] * 100
head(data)
(1402 - 444.7572) / 1402 * 100
(2103-64.026) /2103
# 데이터 처리
data['Diff'] <- data['pre_QTY'] - data['QTY']
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY'] * 100
head(data)
(2103-64.026) /2103
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY']
head(data)
data
(1155-76)/1155
# 데이터 처리
data['Diff'] <- abs(data['pre_QTY'] - data['QTY'])
head(data)
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY']
head(data)
74 - 98 /74
(74 - 98) /74
# 데이터 처리
data['Diff'] <- data['pre_QTY'] - data['QTY']
data['ACC'] <- abs((data['QTY'] - data['Diff']) / data['QTY'])
head(data)
# 데이터 처리
data['Diff'] <- abs(data['pre_QTY'] - data['QTY'])
head(data)
data['ACC'] <- abs((data['QTY'] - data['Diff']) / data['QTY'])
head(data)
data['ACC'] <- abs((data['QTY'] - data['Diff'])) / data['QTY']
head(data)
data['ACC'] <- (data['QTY'] - data['Diff']) / data['QTY']
head(data)
## HOLIDAY, SALEDAY, RAINDAY 변수를 뺀 모델을 fit4로 지정
(fit4 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP, data = data))
summary(fit4)
# 4. All possible regression
library(leaps)
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)
plot(subsets1)
# 데이터 불러오기
data_raw <- read.csv('Data/sales.csv')
head(data_raw)
length(data_raw)
tail(data_raw)
# 데이터 스포츠,이온음료로 필터링
data <- data_raw %>%
filter(CATEGORY == '비타민음료')
data <- data[,-c(1,2)]
head(data)
str(data)
# 해당 데이터의 정규성 검토를 함
shapiro.test(data$QTY)
# 상과관계 분석
cor(data)
######################################################################################
# 산점도 그려보기
pairs(data)
# Linear Regression Model
(fit1 <- lm(QTY~., data = data))
summary(fit1)
anova(fit1)
# Stepwise regression
# 1. backward elimination
step(fit1, direction = 'backward')
# 2. forward selection
fit2 <- lm(QTY~1, data = data)
step(fit2,
direction = "forward",
scope = ~ITEM_CNT + PRICE + MAXTEMP + SALEDAY + RAIN_DAY + HOLIDAY)
# 3. stepwise regression
step(fit1, direction = 'both')
# 4. All possible regression
library(leaps)
subsets1 <- regsubsets(QTY~., data = data,
method = 'seqrep', nbest = 6)
plot(subsets1)
subsets2 <- regsubsets(QTY~., data = data,
method = 'exhaustive', nbest = 6)
plot(subsets2)
## HOLIDAY, SALEDAY 변수를 뺀 모델을 fit3로 지정
(fit3 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP + RAIN_DAY, data = data))
summary(fit3)
## HOLIDAY, SALEDAY, RAINDAY 변수를 뺀 모델을 fit4로 지정
(fit4 <- lm(QTY ~ ITEM_CNT + PRICE + MAXTEMP, data = data))
summary(fit4)
summary(fit3)
summary(fit3)
# fit4의 다중회귀식을 만들어서 QTY 예측
data3 <- data
data3['pre_QTY'] = round((-1188.2848) + (data3['ITEM_CNT'] * (23.0316)) + (data3['PRICE'] * (0.7479)) + (data3['MAXTEMP'] * (13.6824)), 0)
data3
data4['pre_QTY'] = round((-1188.2848) + (data4['ITEM_CNT'] * (23.0316)) + (data4['PRICE'] * (0.7479)) + (data4['MAXTEMP'] * (13.6824)), 0)
# fit4의 다중회귀식을 만들어서 QTY 예측
data4 <- data
data4['pre_QTY'] = round((-1188.2848) + (data4['ITEM_CNT'] * (23.0316)) + (data4['PRICE'] * (0.7479)) + (data4['MAXTEMP'] * (13.6824)), 0)
data4
# fit3의 다중회귀식을 만들어서 QTY 예측
data3 <- data
data3
summary(fit3)
1.054e+03
data3['pre_QTY'] = round((-1.054e+03) + (data3['ITEM_CNT'] * (2.246e+01)) + (data3['PRICE'] * (6.854e-01)) + (data3['MAXTEMP'] * (8.875e+00)) + (data3['RAIN_DAY'] * (6.731e-03)), 0)
data3
data3['Diff'] <- abs(data3['pre_QTY'] - data3['QTY'])
data3
data3['Diff'] <- data3['pre_QTY'] - data3['QTY']
data3
data3['ACC'] <- (data3['QTY'] - data3['Diff']) / data3['QTY']
data3
data3['Diff'] <- abs(data3['pre_QTY'] - data3['QTY'])
data3
data3['ACC'] <- (data3['QTY'] - data3['Diff']) / data3['QTY']
data3
data3
data3['ACC'] <- (data3['QTY'] - data3['Diff']) / data3['QTY'] * 100
data3
data4
data4['Diff'] <- abs(data4['pre_QTY'] - data4['QTY'])
data3['ACC'] <- (data3['QTY'] - data3['Diff']) / data3['QTY'] * 100
data4['ACC'] <- (data4['QTY'] - data4['Diff']) / data4['QTY'] * 100
data4
data4['ACC'] <- abs((data4['QTY'] - data4['Diff'])) / data4['QTY'] * 100
data4
ACC_mean <- data4 %>%
select(ACC) %>%
summarise(avarage=mean(ACC))
ACC_mean
ACC_mean <- data4 %>%
select(ACC) %>%
filter(ACC <= 100)
ACC_mean
ACC_mean <- data4 %>%
select(ACC) %>%
filter(ACC <= 100) %>%
summarise(avarage=mean(ACC))
ACC_mean
data4
